/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<String> binaryTreePaths(TreeNode root) {

        List<String> res=new ArrayList<String>();
        List<Integer> path=new ArrayList<>();

        if(root==null)
        return res;

        traversal(root,res,path);

        return res;


        
    }

    public void traversal(TreeNode cur,List<String> res,List<Integer> path){
        path.add(cur.val);

        if(cur.left==null&&cur.right==null){
            StringBuilder sb=new StringBuilder();
            for(int i=0;i<path.size()-1;i++)
            {
                sb.append(path.get(i)).append("->");
            }
            sb.append(path.get(path.size()-1));

            res.add(sb.toString());
        
            return;
        }
        if(cur.left!=null){
            traversal(cur.left,res,path);
            path.remove(path.size()-1);
        }
        if(cur.right!=null){
            traversal(cur.right,res,path);
            path.remove(path.size()-1);
        }
        
    }
}
