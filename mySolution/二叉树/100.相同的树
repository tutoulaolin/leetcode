//比较前序遍历和中序遍历
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    //前序遍历和中序遍历确定唯一二叉树
    //前序
    public void pre(TreeNode root,List<Integer> nums){
        if(root==null){
            nums.add(10001);
            return;
        }
        

        TreeNode cur=root;
        
        nums.add(cur.val);
        pre(cur.left,nums);
        pre(cur.right,nums);
            
    }
    //中序
    public void mid(TreeNode root,List<Integer> nums){
        if(root==null)
        return;

        TreeNode cur=root;
        mid(cur.left,nums);

        nums.add(cur.val);
        
        mid(cur.right,nums);
            
    }
    public boolean isSameTree(TreeNode p, TreeNode q) {
        List<Integer> nums1=new ArrayList<>();
        List<Integer> nums2=new ArrayList<>();
        pre(p,nums1);
        pre(q,nums2);
        
        mid(p,nums1);
        mid(q,nums2);
        return nums1.toString().equals(nums2.toString());
        
    }
}


//逐步递归逐个比较
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    
    public boolean isSameTree(TreeNode p, TreeNode q) {
        if(p==null&&q==null)
        return true;
        else if(p==null&&q!=null||p!=null&&q==null)
        return false;
        else if(p.val!=q.val)
        return false;

        boolean flag1;
        boolean flag2;
        flag1=isSameTree(p.left,q.left);
        flag2=isSameTree(p.right,q.right);

        return flag1&&flag2;

        
    }
}
