/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {

        List<List<Integer>> res=new ArrayList<List<Integer>>();
        Queue<Node> que=new LinkedList<>();

        Node cur=root;
        if(root==null) return res;
        que.offer(cur);

        while(!que.isEmpty()||cur!=null){
            int len=que.size();
            List<Integer> list=new ArrayList<Integer>();
            while(len>0){
                cur=que.poll();
                for(Node node:cur.children){
                    if(node!=null)
                    que.offer(node);
                }
                len--;
                list.add(cur.val);
            }
            res.add(list);              
                    
            }
            return res;        
    }
}
