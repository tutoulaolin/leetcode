/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        
       if(root==null)
        return root;

        Queue<Node> que=new LinkedList<Node>();
        Node cur=root;
        que.offer(cur);

        while(!que.isEmpty()){
            int len=que.size();
            
            while(len>0){
                
                cur=que.poll();
                if(len>1)   cur.next=que.peek();
                else    cur.next=null;
                
                if(cur.left!=null)  que.offer(cur.left);
                            
                if(cur.right!=null) que.offer(cur.right);
    
                len--;
            }   
        }

        return root;
    }
}
