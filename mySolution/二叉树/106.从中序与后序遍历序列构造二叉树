/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    Map<Integer,Integer> map;
    public TreeNode buildTree(int[] inorder, int[] postorder) {

        map=new HashMap<>();
        for(int i=0;i<inorder.length;i++){
            map.put(inorder[i],i);
        }

        return findNode(inorder,0,inorder.length,postorder,0,postorder.length);
        
    }

    TreeNode findNode(int[] inorder,int inBegin,int inEnd,int[] postorder,int poBegin,int poEnd){
        if(inBegin>=inEnd||poBegin>=poEnd)
        return null;

        int nodeIndex=map.get(postorder[poEnd-1]);
        TreeNode root=new TreeNode(postorder[poEnd-1]);
        int leftNum=nodeIndex-inBegin;
        root.left=findNode(inorder,inBegin,nodeIndex,
        postorder,poBegin,poBegin+leftNum);
        root.right=findNode(inorder,nodeIndex+1,inEnd,postorder,poBegin+leftNum,poEnd-1);

        return root;
    }
}
