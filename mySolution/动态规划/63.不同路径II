class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m=obstacleGrid.size();//行
        int n=obstacleGrid[0].size();//列

        vector<vector<int>>dp(m,vector<int>(n,0));

        if(obstacleGrid[0][0]!=1)
        dp[0][0]=1;
        else
        dp[0][0]=0;
        if(m>1){
            if(obstacleGrid[1][0]!=1&&obstacleGrid[0][0]!=1)
            dp[1][0]=1;
            else
            dp[1][0]=0;
        }
        
        if(n>1){
            if(obstacleGrid[0][1]!=1&&obstacleGrid[0][0]!=1)
            dp[0][1]=1;
            else
            dp[0][1]=0;
        }
        

        for(int i=0;i<m;i++){
            //竖行
            if(obstacleGrid[i][0]==1)
            dp[i][0]=0;
            else{
                if(i-1>=0)
                dp[i][0]=dp[i-1][0];
                else
                dp[i][0]=dp[0][0];
            }           
            
        }
        
        for(int j=0;j<n;j++)
        {
            //横行

            if(obstacleGrid[0][j]==1)
            dp[0][j]=0;
            else{
                if(j-1>=0)
                dp[0][j]=dp[0][j-1];
                else
                dp[0][j]=dp[0][0];

            }
            
        }
        
        for(int i=1;i<m;i++)
        {
            for(int j=1;j<n;j++)
            if(obstacleGrid[i][j]==1)
            dp[i][j]=0;
            else
            dp[i][j]=dp[i-1][j]+dp[i][j-1];
        }

        return dp[m-1][n-1]; 

        
        
        

        

    }
};
