class Solution {

    public boolean search(int[] row,int target){
        int low=0;
        int high=row.length-1;
        int mid=(low+high)/2;
        while(low<=high){
            if(target>row[mid])
            {
                low=mid+1;
                mid=(low+high)/2;
            }
            else if(target<row[mid]){
                high=mid-1;
                mid=(low+high)/2;
            }
            else
            return true;
        }

        return false;
    }
    public boolean searchMatrix(int[][] matrix, int target) {
        
        /* 暴力
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++)
            if(matrix[i][j]==target)
            return true;
        }
        return false;
        */
        /* 对每行进行二分查找 
        for(int[] row:matrix){
            if(search(row,target))
            return true;
        }

        return false;
        */
        /* 从右上角看是一棵二叉搜索树 */
        int m=matrix.length;
        int n=matrix[0].length;
        int i=0;
        int j=n-1;
        while(i<m&&j>=0){
            if(target<matrix[i][j])
            j--;
            else if(target>matrix[i][j])
            i++;
            else
            return true;
        }

        return false;
    
    }
}
