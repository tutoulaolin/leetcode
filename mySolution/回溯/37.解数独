class Solution {
    public boolean backtracking(char[][] board){
        for(int i=0;i<board.length;i++){
            for(int j=0;j<board[0].length;j++){
                if(board[i][j]!='.')
                continue;
                for(char k='1';k<='9';k++){
                    if(isValid(k,i,j,board)){
                        board[i][j]=k;
                        if(backtracking(board))//找到一条符合就直接返回
                        return true;
                        board[i][j]='.';
                    }
                }
                return false;
            }
        }
        return true;
    }

    public boolean isValid(char val,int row,int col,char[][] board){
        int startrow=(row/3)*3;
        int startcol=(col/3)*3;

        for(int i=0;i<9;i++){
            if(board[i][col]==val)
            return false;
            if(board[row][i]==val)
            return false;
        }

        for(int i=startrow;i<startrow+3;i++){
            for(int j=startcol;j<startcol+3;j++)
            if(board[i][j]==val)
            return false;
        }

        return true;
        
    }
    public void solveSudoku(char[][] board) {

        backtracking(board);
        
    }
}
