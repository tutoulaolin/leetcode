class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new ArrayList<>();

    public void backtracking(int[] nums,int start,boolean[] used){

        res.add(new ArrayList(path));
        if(start>=nums.length)
        return;

        for(int i=start;i<nums.length;i++){

            //==true说明同一子集里用过，==false说明另一子集用过
            if(i>0&&nums[i]==nums[i-1]&&used[i-1]==false)
            continue;

            path.add(nums[i]);
            used[i]=true;
            backtracking(nums,i+1,used);
            used[i]=false;
            path.remove(path.size()-1);
        }
    }

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        //去重
        boolean[] used=new boolean[nums.length];
        Arrays.sort(nums);

        if(nums==null||nums.length==0){
            res.add(new ArrayList());
            return res;
        }

        backtracking(nums,0,used);

        return res;


        
    }
}
