class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new LinkedList<>();

    public void backtracking(int k,int n,int sum,int start){
        if(sum==n&&path.size()==k)
        {
            res.add(new LinkedList<>(path));
            return;
        }
        else if(sum>n)
        return;

        for(int i=start;i<=9;i++){
            path.add(i);
            backtracking(k,n,sum+i,i+1);
            path.removeLast();
        }
    }
    public List<List<Integer>> combinationSum3(int k, int n) {
        if(n==0||k==0)
        return res;

        backtracking(k,n,0,1);

        return res;
        
    }
}
