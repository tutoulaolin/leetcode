class Solution {
    public boolean isExist=false;
    public static int[][] dir={{1,0},{0,1},{-1,0},{0,-1}};
    public void backtracking(char[][] board,String word,int cnt,boolean[][] used,int x,int y){
        if(cnt==word.length()){
            isExist=true;
            return;
        }
        int m=board.length;
        int n=board[0].length;
        if(x<0||x>=m||y<0||y>=n||isExist)
        return;
        
            for(int i=0;i<4;i++){
                int curX=x+dir[i][0];
                int curY=y+dir[i][1];
                if(curX<0||curX>=m||curY<0||curY>=n)
                continue;
                if(board[curX][curY]==word.charAt(cnt)&&!used[curX][curY]){
                used[curX][curY]=true;
                backtracking(board, word, cnt+1, used, curX, curY);
                used[curX][curY]=false;
                }
                
            }
        }
    public boolean exist(char[][] board, String word) {
        int m=board.length;
        int n=board[0].length;
        boolean [][] used=new boolean[m][n];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(board[i][j]==word.charAt(0)&&!isExist){
                    used[i][j]=true;
                    backtracking(board, word, 1, used, i, j);
                    used[i][j]=false;
                }
            }
        }
        return isExist;
    }
}
