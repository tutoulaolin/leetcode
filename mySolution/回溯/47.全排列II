class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new ArrayList<>();
    Set<List<Integer>> set=new HashSet<>();
    int[] used=new int[8];

    public void backtracking(int[] nums,int start){
        if(path.size()==nums.length)
        {
            res.add(new ArrayList(path));
            return;
        }
        if(start>0&&nums[start]==nums[start-1]&&used[start-1]==0)
        return;
        for(int i=0;i<nums.length;i++){
            if(used[i]==1)
            continue;
            path.add(nums[i]);
            used[i]=1;
            backtracking(nums,i);
            used[i]=0;
            path.remove(path.size()-1);
            
        }
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        if(nums==null||nums.length==0)
        return res;

        Arrays.sort(nums);

        backtracking(nums,0);

        return res;
    }
}
