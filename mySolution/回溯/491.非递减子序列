class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new ArrayList<>();
    Set<List<Integer>> set=new HashSet<>();
    public void backtracking(int[] nums,int start)
    {
        

        if(start>=nums.length)
        return;

        for(int i=start;i<nums.length;i++){
            if(path.size()>0&&nums[i]<path.get(path.size()-1))
            continue;
            
            
            path.add(nums[i]);
            
            backtracking(nums,i+1);
            if(path.size()>1&&!set.contains(path)){
                set.add(new ArrayList(path));
                res.add(new ArrayList(path));
            }
            
            
            path.remove(path.size()-1);
        }
    }
    public List<List<Integer>> findSubsequences(int[] nums) {
        if(nums==null||nums.length==0)
        return res;
        
        backtracking(nums,0);
        
        
        return res;
        
    }
}


//优化版，用set在计算path时就去重
class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new ArrayList<>();
    Set<List<Integer>> set=new HashSet<>();
    public void backtracking(int[] nums,int start)
    {
        if(path.size()>1)
        res.add(new ArrayList(path));

        if(start>=nums.length)
        return;
        Set<Integer> set=new HashSet<>();
        for(int i=start;i<nums.length;i++){
            if(path.size()>0&&nums[i]<path.get(path.size()-1)||set.contains(nums[i]))
            continue;
            
            
                path.add(nums[i]);
                set.add(nums[i]);
                backtracking(nums,i+1);
                path.remove(path.size()-1);
            
            
            
            
        }
    }
    public List<List<Integer>> findSubsequences(int[] nums) {
        if(nums==null||nums.length==0)
        return res;
        
        backtracking(nums,0);
        
        
        return res;
        
    }
}
//用数组优化
class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new ArrayList<>();
    Set<List<Integer>> set=new HashSet<>();
    public void backtracking(int[] nums,int start)
    {
        if(path.size()>1)
        res.add(new ArrayList(path));

        if(start>=nums.length)
        return;
        int[] used=new int[201];
        for(int i=start;i<nums.length;i++){
            if(path.size()>0&&nums[i]<path.get(path.size()-1)||used[nums[i]+100]==1)
            continue;
            
            
                path.add(nums[i]);
                used[nums[i]+100]=1;
                backtracking(nums,i+1);
                path.remove(path.size()-1);
            
            
            
            
        }
    }
    public List<List<Integer>> findSubsequences(int[] nums) {
        if(nums==null||nums.length==0)
        return res;
        
        backtracking(nums,0);
        
        
        return res;
        
    }
}
