class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new ArrayList<>();
    Set<List<Integer>> set=new HashSet<>();
    public void backtracking(int[] nums,int start)
    {
        

        if(start>=nums.length)
        return;

        for(int i=start;i<nums.length;i++){
            if(path.size()>0&&nums[i]<path.get(path.size()-1))
            continue;
            
            
            path.add(nums[i]);
            
            backtracking(nums,i+1);
            if(path.size()>1&&!set.contains(path)){
                set.add(new ArrayList(path));
                res.add(new ArrayList(path));
            }
            
            
            path.remove(path.size()-1);
        }
    }
    public List<List<Integer>> findSubsequences(int[] nums) {
        if(nums==null||nums.length==0)
        return res;
        
        backtracking(nums,0);
        
        
        return res;
        
    }
}
