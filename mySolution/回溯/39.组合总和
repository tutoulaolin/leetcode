class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new LinkedList<>();

    public void backtracking(int[] candidates,int target,int start){
        if(target==0){
            res.add(new LinkedList<>(path));
            return;
        }

        for(int i=start;i<candidates.length&&target-candidates[i]>=0;i++){
            path.add(candidates[i]);
            backtracking(candidates,target-candidates[i],i);
            path.remove(path.size()-1);
        }
    }
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates.length==0||target==0)
        return res;
        Arrays.sort(candidates);

        backtracking(candidates,target,0);


        return res;

        
    }
}
