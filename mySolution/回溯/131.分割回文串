class Solution {
    List<List<String>> res=new ArrayList<>();
    List<String> path=new LinkedList<>();
    

    public void backtracking(String s,int start,StringBuilder sb){
        if(start>=s.length())
        {
            res.add(new LinkedList<>(path));
            return;
        }

        for(int i=start;i<s.length();i++){
            sb.append(s.charAt(i));
            if(isHuiWen(sb))
            {
                path.add(sb.toString());
                backtracking(s,i+1,new StringBuilder());
                path.remove(path.size()-1);
            }

        }
    }

    public boolean isHuiWen(StringBuilder sb){
        int len=sb.length()-1;
        for(int i=0;i<len;i++){
            if(sb.charAt(i)!=sb.charAt(len))
            return false;
            len--;
        }
        return true;
    } 
    public List<List<String>> partition(String s) {

        if(s==null||s.length()==0)
        return res;

        backtracking(s,0,new StringBuilder());

        return res;
        
    }
}
