class Solution {
    List<List<Integer>> res=new ArrayList<>();
    List<Integer> path=new LinkedList<>();

    public void backtracking(int[] candidates,int target,int start,boolean[] used){
        if(target==0){
            res.add(new LinkedList<>(path));
            return;
        }

        for(int i=start;i<candidates.length&&target-candidates[i]>=0;i++){
            if(i>0&&candidates[i]==candidates[i-1]&&used[i-1]==false)
            continue;
            
            path.add(candidates[i]);
            used[i]=true;
            
            backtracking(candidates,target-candidates[i],i+1,used);
            path.remove(path.size()-1);
            used[i]=false;
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        if(candidates.length==0||target==0)
        return res;
        //排序，便于剪枝优化
        Arrays.sort(candidates);
        boolean[] used=new boolean[candidates.length];

        backtracking(candidates,target,0,used);

        return res;
    }
}
