class Solution {
    public int longestValidParentheses(String s) {
        if(s.isEmpty())
        return 0;
        /*法一：可以匹配的括号设为1，找最长的1
        boolean[] flags=new boolean[s.length()];
        Stack<Integer> stack=new Stack<>();
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(')
            stack.push(i);
            else{
                if(!stack.isEmpty()){
                    flags[i]=true;
                    flags[stack.pop()]=true;
                }
            }    
        }
        int cur=0;
        int ans=0;
        for(int i=0;i<s.length();i++)
        {
            if(flags[i])
            {
                cur++;
                
                }
                else
                {
                    ans=Math.max(ans, cur);
                    cur=0;
                }
        }
        ans=Math.max(ans, cur);
        return ans;
        */
        //法2：动规
        Stack<Integer> stack=new Stack<>();
        int[] dp=new int[s.length()];
        int ans=0;
        int curlen=0;
        for(int i=0;i<s.length();i++){
            if(s.charAt(i)=='(')
            stack.push(i);
            else if(!stack.isEmpty()&&s.charAt(i)==')'){
                //()((((((()))))))的情况
                int left=stack.pop();
                curlen=i-left+1;
                if(left-1>=0){
                    curlen=curlen+dp[left-1];
                }
                dp[i]=curlen;
                ans=Math.max(dp[i], ans);
            }
        }
        return ans;

    }
}
