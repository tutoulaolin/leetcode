//第一版：嵌套循环，时间复杂度nlogn
class Solution {
    public int findMinArrowShots(int[][] points) {
        if(points.length==1)
        return 1;

        Arrays.sort(points,(a,b)->{
            if(a[0]!=b[0])
            return (Integer)b[0]-(Integer)a[0];
            else
            return (Integer)a[1]-(Integer)b[1];
        });

        int left=0;
        int right=0;
        int cnt=1;
        int j;

        for(int i=0;i<points.length;){
            
            left=points[i][0];
            right=points[i][1];
            for(j=i+1;j<points.length;j++){
                left=Math.max(left,points[j][0]);
                right=Math.min(right,points[j][1]);
                
                if(left>right){
                    cnt++;
                    break;
                }
                
                
            }
            i=j;
        }

        return cnt;

        
    }
}






//第二版：更新边界

class Solution {
    public int findMinArrowShots(int[][] points) {
        // 根据气球直径的开始坐标从小到大排序
        // 使用Integer内置比较方法，不会溢出
        Arrays.sort(points, (a, b) -> Integer.compare(a[0], b[0]));

        int count = 1;  // points 不为空至少需要一支箭
        for (int i = 1; i < points.length; i++) {
            if (points[i][0] > points[i - 1][1]) {  // 气球i和气球i-1不挨着，注意这里不是>=
                count++; // 需要一支箭
            } else {  // 气球i和气球i-1挨着
                points[i][1] = Math.min(points[i][1], points[i - 1][1]); // 更新重叠气球最小右边界
            }
        }
        return count;
    }
}
