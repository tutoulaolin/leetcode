//kmp算法：
class Solution {

    public void getNext(String s,int[] next){
        int len=s.length();
        int j=-1;
        next[0]=j;
        for(int i=1;i<len;i++){
            while(j>=0&&s.charAt(i)!=s.charAt(j+1))
            j=next[j];
            if(s.charAt(i)==s.charAt(j+1))
            j++;

            next[i]=j;
        }
    }
    public boolean repeatedSubstringPattern(String s) {
        if(s.length()==0)
        return false;
        int len=s.length();

        int[] next=new int[len];

        getNext(s,next);

        if(next[len-1]!=-1&&len%(len-next[len-1]-1)==0)
        return true;

        return false;

    }
}
/*
i是最小的起始位置，即第一个字串后面一位字符
由于 fail[n−1] 表示 s 具有长度为 fail[n−1]+1 的完全相同的（且最长的）前缀和后缀。那么对于满足题目要求的字符串，一定有 fail[n−1]+1（最长公共前后缀长度）=n−i（即后半重复子串/第一个字串后面的），即 i=n−fail[n−1]−1；

对于不满足题目要求的字符串，n 一定不是 n−fail[n−1]−1 的倍数。（如果是重复子串，那么整个字符串长度为最小重复字串长度的倍数）

上述所有的结论都可以很容易地使用反证法证出。

因此，我们在预处理出 fail 数组后，只需要判断 n 是否为 n−fail[n−1]−1 的倍数即可。
*/

//将s拓展为s+s，在里面能找到字串s（不在首末位置）
class Solution {
    public boolean repeatedSubstringPattern(String s) {
        return (s + s).indexOf(s, 1) != s.length();
    }
}
