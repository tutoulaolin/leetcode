class Solution {

    public boolean isequal(char[] str,int start,int end,String needle){
        
        for(int i=start,j=0;i<end&&j<needle.length();i++,j++){
            if(i>str.length-1)
            return false;
            if(str[i]!=needle.charAt(j))
            return false;
        }
        return true;
    }
    public int strStr(String haystack, String needle) {

        char[] str=haystack.toCharArray();
        int start=0;
        int end=haystack.length()-1;
        int len=needle.length();
        int lens=haystack.length();
        if(len>lens)
        return -1;
        while(start<=end){
            if(str[start]==needle.charAt(0)){
                if(isequal(str,start,start+len,needle))
                return start;
                else
                start++;
            }
            else
            start++;

        }
        if(str[0]==needle.charAt(0)&&len==1)
        return 0;
        return -1;


    }
}


//简单点直接用库函数
class Solution {

    
    public int strStr(String haystack, String needle) {

       return haystack.indexOf(needle);

    }
}

//kmp算法
class Solution {
    public void getNext(String s,int[] next){
        int len=s.length();
        int j=-1;
        next[0]=j;
        int i=1;
        for(;i<len;i++){
            while(j>=0&&s.charAt(i)!=s.charAt(j+1))
                j=next[j];
            if(s.charAt(i)==s.charAt(j+1))
            j++;

            next[i]=j;


        }
        
    }

    
    public int strStr(String haystack, String needle) {
        if(needle.length()==0)
        return 0;

        int[] next=new int[needle.length()];
        getNext(needle,next);
        int j=-1;
        for(int i = 0; i < haystack.length(); i++){
            while(j>=0 && haystack.charAt(i) != needle.charAt(j+1)){
                j = next[j];
            }
            if(haystack.charAt(i) == needle.charAt(j+1)){
                j++;
            }
            if(j == needle.length()-1){
                return (i-needle.length()+1);
            }
        }

        return -1;

    

    }
}
